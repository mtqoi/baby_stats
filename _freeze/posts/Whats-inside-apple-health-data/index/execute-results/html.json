{
  "hash": "a57ebca6f66b80530008c538e05bcb4a",
  "result": {
    "markdown": "---\ntitle: \"What's inside Apple Health data?\"\nformat: html\neditor: visual\ndate: '2023-10-28'\ncategories: [apple health, apple watch, code, explore, xml, R]\nauthor: Matt Thornton\ndraft: true\n---\n\n\n[Last time](../Opening-Apple-Health-data/index.qmd) I was able to open the `xml` export from Apple Health and begin to explore what's inside. In this post I'll continue with that exploration and start to identify how I can see my partner's sleep stats.\n\n## What else was in the `xml`?\n\nBefore I actually import and parse the `xml` file, let's take another look at the file as a string. In particular, near the top of the file I see the following\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nhealth_filepath <- '../../data/apple_health_export/export.xml'\nhealth_file <- substr(read_file(health_filepath), 100, 500)\nprint(health_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\\n<!ELEMENT HealthData (ExportDate,Me,(Record|Correlation|Workout|ActivitySummary|ClinicalRecord|Audiogram|VisionPrescription)*)>\\n<!ATTLIST HealthData\\n  locale CDATA #REQUIRED\\n>\\n<!ELEMENT ExportDate EMPTY>\\n<!ATTLIST ExportDate\\n  value CDATA #REQUIRED\\n>\\n<!ELEMENT Me EMPTY>\\n<!ATTLIST Me\\n  HKCharacteristicTypeIdentifierDateOfBirth                   CDATA #REQUIRED\\n  HKCharacteristicTypeIdentifierBiolog\"\n```\n:::\n:::\n\n\n> The bit I am interested in looks like:\n>\n> ```         \n> (Record|Correlation|Workout|ActivitySummary|ClinicalRecord|Audiogram|VisionPrescription)\n> ```\n\nRecalling that I was able to access what seemed to be the health records I was after via\n\n```         \nhealth[\"//Record\"]\n```\n\nI wonder what I'll see when I look at\n\n-   'Correlation'\n\n-   'Workout'\n\n-   'ActivitySummary'\n\n-   etc.\n\nLet's take a look! Importing the `xml`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(XML)\nhealth <- xmlParse(health_filepath)\n```\n:::\n\n\nand converting it to a dataframe again\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrelation <- XML:::xmlAttrsToDataFrame(health['//Correlation'])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in combineNamedVectors(lapply(doc, xmlAttrs), attrs, omit, ...): no\nelements to combine across records\n```\n:::\n\n```{.r .cell-code}\nworkout <- XML:::xmlAttrsToDataFrame(health['//Workout'])\nactivity_summary <- XML:::xmlAttrsToDataFrame(health['//ActivitySummary'])\nclinical <- XML:::xmlAttrsToDataFrame(health['//ClinicalRecord'])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in combineNamedVectors(lapply(doc, xmlAttrs), attrs, omit, ...): no\nelements to combine across records\n```\n:::\n\n```{.r .cell-code}\naudiogram <- XML:::xmlAttrsToDataFrame(health['//Audiogram'])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in combineNamedVectors(lapply(doc, xmlAttrs), attrs, omit, ...): no\nelements to combine across records\n```\n:::\n\n```{.r .cell-code}\nvision <- XML:::xmlAttrsToDataFrame(health['//VisionPrescription'])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in combineNamedVectors(lapply(doc, xmlAttrs), attrs, omit, ...): no\nelements to combine across records\n```\n:::\n:::\n\n\nOk so some of these just don't exist in my dataset. Turns out I only have something there for `ActivitySummary`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(activity_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 410\nColumns: 10\n$ dateComponents         <chr> \"2022-09-12\", \"2022-09-13\", \"2022-09-14\", \"2022…\n$ activeEnergyBurned     <chr> \"58.077\", \"195.245\", \"134.852\", \"53.301\", \"43.0…\n$ activeEnergyBurnedGoal <chr> \"360\", \"360\", \"360\", \"360\", \"360\", \"360\", \"360\"…\n$ activeEnergyBurnedUnit <chr> \"kcal\", \"kcal\", \"kcal\", \"kcal\", \"kcal\", \"kcal\",…\n$ appleMoveTime          <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n$ appleMoveTimeGoal      <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n$ appleExerciseTime      <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n$ appleExerciseTimeGoal  <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n$ appleStandHours        <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n$ appleStandHoursGoal    <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n```\n:::\n:::\n\n\nOh awesome! It looks like this just contains information about workouts and movement. Let's pick a recent date that should have some data collected by the Apple Watch.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nactivity_summary %>% \n  filter(dateComponents >= '2023-10-01') %>%\n  glimpse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 26\nColumns: 10\n$ dateComponents         <chr> \"2023-10-01\", \"2023-10-02\", \"2023-10-03\", \"2023…\n$ activeEnergyBurned     <chr> \"647.855\", \"673.663\", \"616.126\", \"651.02\", \"685…\n$ activeEnergyBurnedGoal <chr> \"600\", \"600\", \"600\", \"600\", \"600\", \"600\", \"600\"…\n$ activeEnergyBurnedUnit <chr> \"kcal\", \"kcal\", \"kcal\", \"kcal\", \"kcal\", \"kcal\",…\n$ appleMoveTime          <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n$ appleMoveTimeGoal      <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0…\n$ appleExerciseTime      <chr> \"25\", \"17\", \"8\", \"8\", \"10\", \"22\", \"13\", \"27\", \"…\n$ appleExerciseTimeGoal  <chr> \"20\", \"20\", \"20\", \"20\", \"20\", \"20\", \"20\", \"20\",…\n$ appleStandHours        <chr> \"17\", \"16\", \"14\", \"16\", \"19\", \"17\", \"12\", \"19\",…\n$ appleStandHoursGoal    <chr> \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\", \"12\",…\n```\n:::\n:::\n\n\nLooks like just the info given in the Workouts section of the Apple Watch.\n\nTODO: add screenshot.\n\nIt will be interesting to see how this relates to the data contained in `health['//Record']`. Is it entirely separate, or just presented in a slightly nice format?\n\nJust for fun let's look at my `appleStandHours`. Here's what I see in my Health app:\n\nTODO: add screenshot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nactivity_summary %>% \n  select('dateComponents', 'appleStandHours') %>% \n  mutate(appleStandHours = as.numeric(appleStandHours),\n         dateComponents = as.Date(dateComponents) # Q: why is `Date` capitalised but `numeric` isn't?\n         ) %>% \n  filter(dateComponents >= '2023-08-01') %>% \n  mutate(toHighlight = ifelse(appleStandHours>=12, \"yes\", \"no\")) %>% \n  ggplot(aes(x=dateComponents, y=appleStandHours, fill=toHighlight)) + \n  geom_bar(stat='identity') + \n  geom_hline(yintercept=12, linetype='dotted', col = 'black') + \n  annotate(\"text\", x = as.Date('2023-08-05'), y = 12, label = \"Stand Goal\", vjust = -0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nOne thing I'm noting is how easy this was to plot using `ggplot`. In Python to create similar plots I've had to think more about the mechanics of what my code is doing. I'll be interested to see whether getting more comfortable with `ggplot` just makes my exploratory analysis faster and lets me abstract away from the code and focus on the meaning of my data.\n\nTODO: write another post which is a comparison between R and Python for this same graph.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}