{
  "hash": "16376d7e5bf6b00bec366d97dec192d5",
  "result": {
    "markdown": "---\ntitle: \"Opening Apple Health data\"\nformat: html\neditor: visual\ndate: '2023-10-26'\ncategories: [apple, code, import, xml, R]\nimage: 'image.jpg'\nauthor: Matt Thornton\n---\n\n\n## \n\n## Opening Apple Health data\n\nMy partner exported her Apple Health data using the Health app's export functionality. We now have a folder of `.xml` files to deal with.\n\nLet's take a look at `export.xml` which I think should contain the sleep data.\n\nReading the first few characters of the file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('readr')\nhealth_filepath <- '../../data/apple_health_export/export.xml'\nhealth_file <- substr(read_file(health_filepath), 1, 2000)\nprint(health_file)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE HealthData [\\n<!-- HealthKit Export Version: 13 -->\\n<!ELEMENT HealthData (ExportDate,Me,(Record|Correlation|Workout|ActivitySummary|ClinicalRecord|Audiogram|VisionPrescription)*)>\\n<!ATTLIST HealthData\\n  locale CDATA #REQUIRED\\n>\\n<!ELEMENT ExportDate EMPTY>\\n<!ATTLIST ExportDate\\n  value CDATA #REQUIRED\\n>\\n<!ELEMENT Me EMPTY>\\n<!ATTLIST Me\\n  HKCharacteristicTypeIdentifierDateOfBirth                   CDATA #REQUIRED\\n  HKCharacteristicTypeIdentifierBiologicalSex                 CDATA #REQUIRED\\n  HKCharacteristicTypeIdentifierBloodType                     CDATA #REQUIRED\\n  HKCharacteristicTypeIdentifierFitzpatrickSkinType           CDATA #REQUIRED\\n  HKCharacteristicTypeIdentifierCardioFitnessMedicationsUse   CDATA #REQUIRED\\n>\\n<!ELEMENT Record ((MetadataEntry|HeartRateVariabilityMetadataList)*)>\\n<!ATTLIST Record\\n  type          CDATA #REQUIRED\\n  unit          CDATA #IMPLIED\\n  value         CDATA #IMPLIED\\n  sourceName    CDATA #REQUIRED\\n  sourceVersion CDATA #IMPLIED\\n  device        CDATA #IMPLIED\\n  creationDate  CDATA #IMPLIED\\n  startDate     CDATA #REQUIRED\\n  endDate       CDATA #REQUIRED\\n>\\n<!-- Note: Any Records that appear as children of a correlation also appear as top-level records in this document. -->\\n<!ELEMENT Correlation ((MetadataEntry|Record)*)>\\n<!ATTLIST Correlation\\n  type          CDATA #REQUIRED\\n  sourceName    CDATA #REQUIRED\\n  sourceVersion CDATA #IMPLIED\\n  device        CDATA #IMPLIED\\n  creationDate  CDATA #IMPLIED\\n  startDate     CDATA #REQUIRED\\n  endDate       CDATA #REQUIRED\\n>\\n<!ELEMENT Workout ((MetadataEntry|WorkoutEvent|WorkoutRoute|WorkoutStatistics)*)>\\n<!ATTLIST Workout\\n  workoutActivityType   CDATA #REQUIRED\\n  duration              CDATA #IMPLIED\\n  durationUnit          CDATA #IMPLIED\\n  totalDistance         CDATA #IMPLIED\\n  totalDistanceUnit     CDATA #IMPLIED\\n  totalEnergyBurned     CDATA #IMPLIED\\n  totalEnergyBurnedUnit CDATA #IMPLIED\\n  sourceName            CDATA #REQUIRED\\n  sourceVersion         C\"\n```\n:::\n:::\n\n\nSo it looks like Apple use `HKCharacteristicTypeIdentifier` as a prefix to some data. Perhaps this is just a field name?\n\nLet's parse the `xml` file properly and see what we have\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"XML\") # I need this one to work with the xml files\nlibrary(\"XML\")\n\n# here are some ones that I think I might need\nlibrary(\"methods\")\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ purrr     1.0.2\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"lubridate\")\nlibrary(\"ggplot2\")\nlibrary(\"dplyr\")\n\n# parse the xml file\nhealth <- xmlParse(health_filepath)\nsummary(health)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$nameCounts\n\n                          Record      InstantaneousBeatsPerMinute \n                          505685                           171703 \n                   MetadataEntry HeartRateVariabilityMetadataList \n                          144203                             2511 \n                 ActivitySummary                     WorkoutEvent \n                             410                              172 \n               WorkoutStatistics                          Workout \n                             143                               38 \n                   FileReference                     WorkoutRoute \n                              30                               30 \n                      ExportDate                       HealthData \n                               1                                1 \n                              Me \n                               1 \n\n$numNodes\n[1] 824928\n```\n:::\n:::\n\n\nHmm, not very helpful?\n\nInstead of spending more time trying to parse the `xml` file myself, let's turn to Google. [This site](https://www.r-bloggers.com/2020/02/apple-health-export-part-i/) seems to have some explanations of what's going on with the Apple Watch data. It looks like indeed `HKQuantityTypeIdentifier` is just a prefix for a field name. There should be a field called `HKCategoryTypeIdentifierSleepAnalysis` which sounds like what I am after!\n\n## Exploring the data\n\n[This blog](https://www.johngoldin.com/blog/apple-health-export/2022-07-notes-apple-health-export/index.html) gives a snippet that should convert the entire `xml` import into a dataframe. This has saved a ton of time!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://www.johngoldin.com/blog/apple-health-export/2022-07-notes-apple-health-export/index.html\nhealth_df <- XML:::xmlAttrsToDataFrame(health[\"//Record\"], stringsAsFactors = FALSE) |>\n        as_tibble() |> mutate(value = as.numeric(value)) |>\n        select(-device)  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `value = as.numeric(value)`.\nCaused by warning:\n! NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\nsummary(health_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     type            sourceName        sourceVersion          unit          \n Length:505685      Length:505685      Length:505685      Length:505685     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n creationDate        startDate           endDate              value         \n Length:505685      Length:505685      Length:505685      Min.   :   0.000  \n Class :character   Class :character   Class :character   1st Qu.:   0.365  \n Mode  :character   Mode  :character   Mode  :character   Median :   1.266  \n                                                          Mean   :  27.002  \n                                                          3rd Qu.:  35.696  \n                                                          Max.   :1290.000  \n                                                          NA's   :17576     \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(health_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 505685      8\n```\n:::\n:::\n\n\nOkay so we have half a million rows and eight columns. Let's take a look inside:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhealth_df %>% \n  tail(10) %>% \n  glimpse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10\nColumns: 8\n$ type          <chr> \"HKQuantityTypeIdentifierHeartRateVariabilitySDNN\", \"HKQ…\n$ sourceName    <chr> \"Matthew’s Apple Watch\", \"Matthew’s Apple Watch\", \"Matth…\n$ sourceVersion <chr> \"10.0.1\", \"10.0.1\", \"10.0.1\", \"10.0.1\", \"10.0.1\", \"10.0.…\n$ unit          <chr> \"ms\", \"ms\", \"ms\", \"ms\", \"ms\", \"ms\", \"ms\", \"ms\", \"ms\", \"m…\n$ creationDate  <chr> \"2023-10-25 15:37:04 +0100\", \"2023-10-25 17:44:53 +0100\"…\n$ startDate     <chr> \"2023-10-25 15:36:03 +0100\", \"2023-10-25 17:43:52 +0100\"…\n$ endDate       <chr> \"2023-10-25 15:37:02 +0100\", \"2023-10-25 17:44:45 +0100\"…\n$ value         <dbl> 27.4134, 52.6730, 20.0241, 38.7226, 22.8867, 39.6330, 58…\n```\n:::\n:::\n\n\nWe've already cast our values to numeric, which is great. Looks like we have some metadata (`sourceName`, `sourceVersion`) about how the data was collected. I should take a quick glance at these fields but I can probably ignore them.\n\nThe `type` field looks to contain my different health data, so I'll want to filter by that. `unit` is *probably* nothing I need to think about, but once I've found my sleep data I should just check that I can safely ignore the field.\n\nThen we have `creationDate`, `startDate` and `endDate`. I will need to cast these to datetimes (& work out how to work with datetimes in R!) and then work out how they relate to the `value` field for the sleep data that I am interested in. I assume that the relationship between the datetime fields and `value` will differ depending on `type` so there's not going to be a one-size-fits-all approach here.\n\n### `type` distribution\n\nLet's look at the most frequent `type`'s\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}